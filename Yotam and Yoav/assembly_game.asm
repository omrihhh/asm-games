×›IDEAL
MODEL small
STACK 100h
DATASEG
; --------------------------
    char db 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2
         db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2
         db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
         db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2
         db 3
         
    tree db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2 
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2 
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2 
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 2
         db 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 2
         db 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
         db 3
    
    tree2 db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2 
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2 
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2 
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 2
          db 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 2
          db 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 3    
         
    tree3 db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 3

    key db 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2
        db 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2
        db 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 2
        db 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 2
        db 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 2
        db 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 2
        db 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2
        db 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2
        db 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 2
        db 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 2
        db 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 2
        db 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 2
        db 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 2
        db 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 2
        db 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 2
        db 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 2
        db 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 2
        db 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 2
        db 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 2
        db 3
    
    door db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2 
          db 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2 
          db 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2 
          db 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2 
          db 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2
          db 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2
          db 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 3

    door_open db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2 
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2 
          db 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2 
          db 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2 
          db 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2 
          db 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2
          db 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2
          db 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2
          db 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
          db 3

    clouds db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 3

    gift_1 db 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2
           db 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 2
           db 1, 1, 4, 4, 4, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 2
           db 1, 1, 4, 4, 4, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2
           db 1, 1, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 1, 1, 1, 1, 2
           db 1, 1, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 1, 1, 1, 1, 2
           db 1, 1, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 1, 1, 1, 1, 2
           db 1, 1, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 1, 1, 1, 1, 2
           db 1, 1, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 1, 1, 1, 1, 2
           db 1, 1, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 1, 1, 1, 1, 2
           db 1, 1, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 1, 1, 1, 1, 2
           db 1, 1, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 1, 1, 1, 1, 2
           db 1, 1, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 1, 0, 0, 1, 4, 4, 4, 1, 1, 1, 1, 2
           db 1, 1, 1, 4, 4, 1, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 1, 0, 0, 1, 4, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 3 

    nails db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 2
          db 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 2
          db 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2 
          db 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 3

    hammer db 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
           db 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2
           db 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 2
           db 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 2
           db 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 2
           db 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
           db 3


    stick db 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 2
          db 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2 
          db 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2
          db 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2
          db 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2
          db 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2
          db 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 2
          db 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 2
          db 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 2
          db 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2
          db 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2
          db 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 2 
          db 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 2 
          db 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 2
          db 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 2     
          db 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
          db 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
          db 3

ladder_top db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
           db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2 
           db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
           db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
           db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
           db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
           db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
           db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
           db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
           db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
           db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
           db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
           db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
           db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
           db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
           db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
           db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
           db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
           db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
           db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
           db 3

ladder_middle db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
              db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
              db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
              db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
              db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 3

ladder_bottom db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
              db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
              db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
              db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2
              db 3

gate_to_heaven db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2
               db 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2
               db 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 2
               db 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 2
               db 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 2
               db 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 2
               db 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2
               
               db 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 1, 0, 0, 2
               db 1, 1, 1, 1, 0, 0, 1, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2
               db 1, 1, 1, 1, 0, 0, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 0, 1, 0, 4, 4, 2
               db 1, 1, 1, 1, 0, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, 1, 4, 4, 4, 0, 4, 4, 2
               db 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 1, 4, 4, 4, 4, 4, 1, 4, 2
               db 1, 1, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 1, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 2
               db 1, 4, 4, 4, 4, 1, 4, 4, 4, 1, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2
               db 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 1, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2
               db 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 2
               db 3
    
cauldron db 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2
         db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
         db 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 2
         db 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 2
         db 1, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 2
         db 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 2
         db 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2
         db 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2
         db 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2
         db 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2
         db 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2
         db 1, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 2
         db 1, 1, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 2
         db 1, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 2
         db 1, 4, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 1, 2
         db 3

cauldron_primary db 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2
                 db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
                 db 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 2
                 db 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 2
                 db 1, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 2
                 db 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 2
                 db 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2
                 db 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2
                 db 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2
                 db 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2
                 db 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2
                 db 1, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 2
                 db 1, 1, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 2
                 db 1, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 2
                 db 1, 4, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 1, 2
                 db 3

cauldron_secondary db 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 2
                   db 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 2
                   db 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
                   db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 1, 1, 1, 1, 1, 2
                   db 1, 1, 1, 1, 1, 6, 6, 1, 1, 1, 6, 6, 1, 1, 1, 1, 1, 2
                   db 1, 1, 1, 6, 0, 6, 6, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2
                   db 1, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 2
                   db 0, 0, 0, 5, 5, 6, 6, 5, 5, 6, 6, 5, 5, 5, 0, 0, 0, 2
                   db 0, 0, 0, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 6, 0, 0, 0, 2
                   db 1, 0, 0, 0, 0, 5, 5, 5, 5, 5, 6, 6, 5, 0, 0, 0, 0, 2
                   db 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 6, 6, 0, 4, 4, 4, 4, 2
                   db 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2
                   db 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2
                   db 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2
                   db 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2
                   db 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2
                   db 1, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 2
                   db 1, 1, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 2
                   db 1, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 2
                   db 1, 4, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 1, 2
                   db 3

potion db 1, 1, 1, 1, 4, 1, 1, 1, 1, 2
       db 1, 1, 1, 1, 1, 1, 4, 1, 1, 2
       db 1, 1, 1, 4, 1, 1, 1, 1, 1, 2
       db 1, 1, 0, 0, 0, 0, 0, 1, 1, 2
       db 1, 1, 1, 0, 1, 0, 1, 1, 1, 2
       db 1, 1, 1, 0, 4, 0, 1, 1, 1, 2
       db 1, 1, 1, 0, 1, 0, 1, 1, 1, 2
       db 1, 1, 1, 0, 1, 0, 1, 1, 1, 2
       db 1, 1, 0, 4, 1, 1, 0, 1, 1, 2
       db 1, 1, 0, 1, 1, 4, 0, 1, 1, 2
       db 1, 0, 1, 4, 1, 1, 1, 0, 1, 2
       db 1, 0, 4, 4, 4, 4, 4, 0, 1, 2
       db 0, 4, 4, 4, 4, 4, 4, 4, 0, 2
       db 0, 0, 4, 4, 4, 4, 4, 0, 0, 2
       db 1, 0, 4, 4, 4, 4, 4, 0, 1, 2
       db 1, 1, 0, 4, 4, 4, 0, 1, 1, 2
       db 1, 1, 0, 4, 4, 4, 0, 1, 1, 2
       db 1, 1, 1, 0, 4, 0, 1, 1, 1, 2
       db 1, 1, 1, 0, 4, 0, 1, 1, 1, 2
       db 1, 1, 1, 1, 0, 1, 1, 1, 1, 2
       db 3

witchy_door db 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2
            db 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2
            db 0, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 1, 2
            db 0, 4, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 2
            db 0, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 4, 0, 2
            db 0, 4, 0, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 0, 4, 0, 2
            db 0, 4, 0, 5, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 0, 4, 0, 2
            db 0, 4, 0, 5, 5, 6, 6, 6, 6, 4, 6, 6, 6, 5, 5, 0, 4, 0, 2
            db 0, 4, 0, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 0, 4, 0, 2
            db 0, 4, 0, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 0, 4, 0, 2
            db 0, 4, 0, 5, 6, 6, 6, 4, 4, 6, 6, 4, 6, 6, 5, 0, 4, 0, 2
            db 0, 4, 0, 5, 6, 6, 4, 6, 6, 4, 6, 6, 6, 6, 5, 0, 4, 0, 2
            db 0, 4, 0, 5, 6, 4, 6, 6, 6, 4, 6, 6, 6, 6, 5, 0, 4, 0, 2
            db 0, 4, 0, 5, 6, 4, 6, 6, 6, 6, 4, 6, 6, 6, 5, 0, 4, 0, 2
            db 0, 4, 0, 5, 6, 4, 6, 4, 6, 6, 4, 6, 6, 6, 5, 0, 4, 0, 2
            db 0, 4, 0, 5, 6, 4, 6, 4, 4, 6, 4, 6, 6, 6, 5, 0, 4, 0, 2
            db 0, 4, 0, 5, 6, 4, 6, 4, 4, 6, 6, 4, 6, 6, 5, 0, 4, 0, 2
            db 0, 4, 0, 5, 6, 4, 6, 4, 6, 4, 6, 4, 6, 5, 5, 0, 4, 0, 2
            db 0, 4, 0, 5, 6, 4, 6, 4, 6, 4, 6, 4, 6, 5, 5, 0, 4, 0, 2
            db 0, 4, 0, 5, 6, 4, 6, 4, 6, 4, 6, 4, 6, 5, 5, 0, 4, 0, 2
            db 0, 4, 0, 5, 6, 4, 6, 4, 6, 4, 6, 4, 6, 5, 0, 4, 0, 1, 2
            db 0, 4, 0, 5, 6, 4, 6, 4, 6, 4, 6, 4, 6, 5, 0, 4, 0, 1, 2
            db 0, 4, 0, 5, 6, 4, 6, 6, 4, 6, 6, 4, 6, 5, 0, 4, 0, 1, 2
            db 0, 4, 0, 5, 6, 6, 4, 6, 4, 6, 4, 6, 6, 5, 0, 4, 0, 1, 2
            db 0, 4, 0, 5, 6, 6, 4, 6, 6, 6, 4, 6, 6, 5, 0, 4, 0, 1, 2
            db 0, 4, 0, 5, 6, 6, 4, 6, 6, 6, 4, 6, 6, 5, 0, 4, 0, 1, 2
            db 0, 4, 0, 5, 5, 6, 6, 4, 6, 6, 4, 6, 5, 5, 0, 4, 0, 1, 2
            db 0, 4, 0, 5, 5, 4, 6, 4, 6, 4, 6, 6, 5, 5, 0, 4, 0, 1, 2
            db 0, 4, 0, 5, 5, 6, 6, 6, 4, 6, 6, 6, 5, 5, 0, 4, 0, 1, 2
            db 0, 4, 0, 5, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 0, 4, 0, 1, 2
            db 0, 4, 0, 5, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 0, 4, 0, 1, 2
            db 0, 4, 0, 5, 5, 6, 6, 6, 6, 4, 6, 6, 5, 5, 0, 4, 0, 1, 2
            db 0, 4, 0, 5, 5, 5, 6, 6, 6, 6, 6, 5, 5, 5, 0, 4, 0, 1, 2
            db 0, 4, 0, 5, 5, 5, 6, 6, 6, 6, 6, 5, 5, 5, 0, 4, 0, 1, 2
            db 0, 4, 0, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 0, 4, 0, 1, 2
            db 0, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 4, 0, 1, 2
            db 0, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 4, 0, 1, 2
            db 0, 4, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 4, 4, 4, 4, 0, 1, 2
            db 0, 4, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 2
            db 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 1, 2
            db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2
            db 3

floor db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
      db 3

teleporter db 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 2
           db 1, 1, 0, 0, 4, 4, 4, 0, 0, 1, 1, 2
           db 1, 0, 4, 4, 4, 4, 4, 4, 4, 0, 1, 2
           db 1, 0, 4, 4, 4, 4, 4, 4, 4, 0, 1, 2
           db 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2
           db 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2
           db 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2
           db 1, 0, 4, 4, 4, 4, 4, 4, 4, 0, 1, 2
           db 1, 0, 4, 4, 4, 4, 4, 4, 4, 0, 1, 2
           db 1, 1, 0, 0, 4, 4, 4, 0, 0, 1, 1, 2
           db 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 2
           db 3

teleport_door db 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2
              db 1, 1, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 1, 1, 2
              db 1, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 1, 2
              db 1, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 1, 2
              db 1, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 1, 2
              db 0, 4, 4, 0, 4, 0, 4, 4, 4, 0, 4, 4, 4, 0, 2
              db 0, 4, 4, 0, 4, 0, 4, 4, 4, 0, 4, 4, 4, 0, 2
              db 0, 4, 4, 0, 4, 0, 4, 4, 4, 0, 4, 4, 4, 0, 2
              db 0, 4, 4, 0, 4, 0, 4, 4, 4, 0, 4, 4, 4, 0, 2
              db 0, 4, 4, 0, 4, 0, 4, 4, 4, 0, 4, 4, 4, 0, 2
              db 0, 4, 4, 0, 4, 0, 4, 4, 4, 0, 4, 4, 4, 0, 2
              db 0, 4, 4, 0, 4, 0, 4, 4, 4, 0, 4, 4, 4, 0, 2
              db 0, 4, 4, 0, 4, 0, 4, 4, 0, 0, 4, 4, 4, 0, 2
              db 0, 4, 4, 0, 4, 0, 4, 4, 0, 5, 0, 4, 4, 0, 2
              db 0, 4, 4, 0, 4, 0, 4, 4, 0, 0, 0, 4, 4, 0, 2
              db 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2
              db 0, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 0, 2
              db 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 2
              db 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 2
              db 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2
              db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2
              db 3
    
    bucket db 1, 0, 0, 0, 0, 0, 1, 2
           db 0, 0, 4, 4, 4, 0, 0, 2
           db 0, 4, 4, 4, 4, 4, 0, 2
           db 0, 0, 4, 4, 4, 0, 0, 2
           db 0, 0, 0, 0, 0, 0, 0, 2
           db 0, 0, 0, 0, 0, 0, 0, 2
           db 0, 0, 0, 0, 0, 0, 0, 2
           db 0, 0, 0, 0, 0, 0, 0, 2
           db 1, 0, 0, 0, 0, 0, 1, 2
           db 3

    wall db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 0,2
         db 3 

    x dw 160    ; character
    y dw 171
    pre_y dw 0
    pre_x dw 0
    
    x2 dw 16    ; tree
    y2 dw 95
    pre_y2 dw 0
    pre_x2 dw 0
    yy2 dw 179
    pre_yy2 dw 0

    x3 dw 60    ; key
    y3 dw 120
    pre_y3 dw 0
    pre_x3 dw 0

    x4 dw 230   ;door
    y4 dw 85
    pre_y4 dw 0
    pre_x4 dw 0
    
    x5 dw 0   ;clouds
    y5 dw 0
    pre_y5 dw 0
    pre_x5 dw 0
    
    x6 dw 70   ;gift_1
    y6 dw 160
    pre_x6 dw 0
    pre_y6 dw 0
    
    x7 dw 140   ;gift_2
    y7 dw 160
    pre_x7 dw 0
    pre_y7 dw 0
    
    x8 dw 210   ;gift_3
    y8 dw 160
    pre_x8 dw 0
    pre_y8 dw 0
    
    x9 dw 140   ;nails
    y9 dw 160
    pre_x9 dw 0
    pre_y9 dw 0

    x10 dw 210   ;hammer
    y10 dw 160
    pre_x10 dw 0
    pre_y10 dw 0

    x11 dw 70   ;stick
    y11 dw 130
    pre_x11 dw 0
    pre_y11 dw 0

    x12 dw 70   ;ladder_top
    y12 dw 72
    pre_x12 dw 0
    pre_y12 dw 0

    x13 dw 70   ;ladder_middle
    y13 dw 112
    pre_x13 dw 0
    pre_y13 dw 0

    x14 dw 70   ;ladder_bottom
    y14 dw 160
    pre_x14 dw 0
    pre_y14 dw 0

    x15 dw 60   ;gate_to_heaven
    y15 dw 2
    pre_x15 dw 0
    pre_y15 dw 0

    x16 dw 140  ; cauldron
    y16 dw 170
    pre_x16 dw 0
    pre_y16 dw 0

    x17 dw 200  ; potion 1
    y17 dw 160
    pre_x17 dw 0
    pre_y17 dw 0

    x18 dw 240  ; potion 2
    y18 dw 160
    pre_x18 dw 0
    pre_y18 dw 0

    x19 dw 280  ; potion 3
    y19 dw 160
    pre_x19 dw 0
    pre_y19 dw 0

    x20 dw 40  ; witchy_door
    y20 dw 116
    pre_x20 dw 0
    pre_y20 dw 0

    x21 dw 140  ; magic cauldron
    y21 dw 160
    pre_x21 dw 0
    pre_y21 dw 0

    x22 dw 0  ; floor
    y22 dw 70
    pre_x22 dw 0
    pre_y22 dw 0

    x23 dw 46    ; bucket
    y23 dw 161
    pre_y23 dw 0
    pre_x23 dw 0

    x24 dw 230  ; tp1
    y24 dw 170
    pre_x24 dw 0
    pre_y24 dw 0
    
    x26 dw 50  ; tp3
    y26 dw 100
    pre_x26 dw 0
    pre_y26 dw 0

    x28 dw 230  ; tp5
    y28 dw 40
    pre_x28 dw 0
    pre_y28 dw 0

    x30 dw 100  ; tp_door
    y30 dw 158
    pre_x30 dw 0
    pre_y30 dw 0

    x31 dw 135  ; wall
    y31 dw 130
    pre_x31 dw 0
    pre_y31 dw 0

    x32 dw 50  ; tp7
    y32 dw 40
    pre_x32 dw 0
    pre_y32 dw 0

    x33 dw 280  ; tp9
    y33 dw 100
    pre_x33 dw 0
    pre_y33 dw 0

    last_left dw 0
    last_right dw 0
    
    count_1 dw 1
    key_fell dw 0
    pressed dw 0
    count_2 dw 0
    spilled dw 0

    blue dw 0
    yellow dw 0
    red dw 0
    potion_yum dw 0

    gift1_draw dw 0
    gift2_draw dw 0
    gift3_draw dw 0

    level_num dw 0
; --------------------------
CODESEG


PROC input_without_echo ; ret AL
    mov ah, 7
    int 33
    ret
endp

PROC get_move
    push ax

    call input_without_echo

    cmp AL, 100
    je move_right

    cmp AL, 97
    je move_left

    cmp AL, 101
    jne continue_move
    cmp [level_num], 2
    je inventory
    cmp [level_num], 3
    je make_potion_label
    cmp [level_num], 5
    je button_pressed

    continue_move:
    cmp AL, 32
    jne continue_move2
    cmp [level_num], 2
    je space_pressed
    cmp [level_num], 4
    je tp_pressed

    continue_move2:
    cmp AL, 102
    je clear_potion

    jmp not_pressed

    move_right:
        call move_rightF
        jmp not_pressed
    
    move_left:
        call move_leftF
        jmp not_pressed
    

    inventory:
        call open_gift
        jmp not_pressed 

    make_potion_label:
        call make_potion
        jmp not_pressed

    space_pressed:
        cmp [x], 68
        jne not_pressed

        cmp [gift1_draw], 2
        jl not_pressed

        cmp [gift2_draw], 2
        jl not_pressed

        cmp [gift2_draw], 2
        jl not_pressed

        call go_up
        jmp not_pressed
    
    tp_pressed:
        call check_tp
        jmp not_pressed
    
    clear_potion:
        cmp [level_num], 3
        jne not_pressed

        mov [red], 0
        mov [blue], 0
        mov [yellow], 0
        jmp not_pressed
    
    button_pressed:
        cmp [x], 34
        jne not_pressed

        cmp [pressed], 20
        jne continue_bucket

        inc [spilled]

        continue_bucket:
        inc [pressed]
        dec [y2]
        jmp not_pressed

    not_pressed:
    cmp [spilled], 0
    je continue_move3

    call clear_screen2
    jmp continue_move4

    continue_move3:
    call clear_screen

    continue_move4:

    pop ax
    ret

    
ENDP

PROC move_leftF
    cmp [x], 7
    jng endF

    cmp [level_num], 1
    jne cont_left

    cmp [x], 56
    jng endF

    cont_left:
        cmp [level_num], 4
        jne cont_left4

        cmp [y], 171
        jne cont_left2

        cmp [x], 136
        je endF

    cont_left2:
        cmp [y], 100
        jne cont_left3

        cmp [x], 138
        je endF
    
    cont_left3:
        cmp [y], 40
        jne cont_left4

        cmp [x], 138
        je endF
    
    cont_left4:
        mov [last_right], 0
        inc [last_left]

        sub [x], 8
    endF:
    ret
ENDP

PROC move_rightF
    cmp [x], 280
    jnl endR

    cont_right:
        cmp [level_num], 4
        jne cont_right4

        cmp [y], 171
        jne cont_right2

        cmp [x], 100
        je endR

    cont_right2:
        cmp [y], 100
        jne cont_right3

        cmp [x], 100
        je endR
    
    cont_right3:
        cmp [y], 40
        jne cont_right4

        cmp [x], 102
        je endR
    
    cont_right4:

    mov [last_left], 0
    inc [last_right]
    
    add [x], 8

    endR:
    ret
ENDP

PROC clear_screen
	push ax
	push bx
	push cx
	push dx

	mov ax,0600h
	mov bh,0
	mov cx,0h
	mov dx,184fh
	int 10h

	pop dx
	pop cx
	pop bx
	pop ax

	ret
ENDP

PROC show_pixel 
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset char ;set si to be first place in memory of char

    push CX
    push DX
    mov CX, [x]
    mov [pre_x], CX
    mov DX, [y]
    mov [pre_y], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,3  ;choose cyan as color (03h)
    MOV BH,00  ;set the page number
    jmp show_next_pixel

    show_next_pixel:
        MOV CX,[x] ;set the line (x)
        MOV DX, [y] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel ;jump to paint_pixel

    skip_pixel:
        inc [x] ;x++
        inc [x]
        inc si  ;si++
        ; inc si
        jmp show_next_pixel ;jump to show_next_pixel

    paint_pixel:
        int 16  ;execute the configuration (10h)
        inc [y]
        int 16
        dec [y]
        inc si  ;si++
        inc [x] ;x++
        int 16
        inc [y]
        int 16
        dec [y]
        inc [x]
        ; inc si
        jmp show_next_pixel ;jump to show_next_pixel

    next_row:
        inc [y] ;y++
        inc [y]
        mov CX, [pre_x]
        mov [x], CX
        inc si  ;si++
        jmp show_next_pixel ;jump to show_next_pixel

    stop_show_pixel:
        mov CX, [pre_x]
        mov [x], CX

        mov DX, [pre_y]
        mov [y], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
ENDP

PROC pre_game
    ;write text "Dreblers - The Game"
    mov al, 1
	mov bh, 0
	mov bl, 3    			   ;color
	mov cx, 19                 ;message size
	mov dl, 10                 ;column
	mov dh, 10                 ;row
	push cs
	pop es
	mov bp, offset TimeText
	mov ah, 13h
	int 10h
	jmp textTimeEnd
	TimeText db "Dreblers - The Game"

    textTimeEnd:
    ;write text "Press Any Key To Continue"
    mov al, 1
	mov bh, 0
	mov bl, 3    			   ;color
	mov cx, 25                 ;message size
	mov dl, 8                  ;column
	mov dh, 15                 ;row
	push cs
	pop es
	mov bp, offset TimeText2
	mov ah, 13h
	int 10h
	jmp textTimeEnd2
	TimeText2 db "Press Any Key To Continue"

    textTimeEnd2:
    call get_move
    call clear_screen
    inc [level_num]
    call main_loop
    ret


ENDP
; ----------------------------------------------------------------------------------------------------------------------------------------
PROC show_tree 
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset tree ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x2]
    mov [pre_x2], CX
    mov DX, [y2]
    mov [pre_y2], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,6  ;choose brown as color (06h)
    MOV BH,00  ;set the page number
    jmp show_next_pixel_tree

    show_next_pixel_tree:
        MOV CX,[x2] ;set the line (x)
        MOV DX, [y2] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_tree ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_tree ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_tree ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_tree ;jump to paint_pixel

    skip_pixel_tree:
        inc [x2] ;x++
        inc [x2]
        inc si  ;si++
        jmp show_next_pixel_tree ;jump to show_next_pixel

    paint_pixel_tree:
        int 16  ;execute the configuration (10h)
        inc [y2]
        int 16
        dec [y2]
        inc si  ;si++
        inc [x2] ;x++
        int 16
        inc [y2]
        int 16
        dec [y2]
        inc [x2]
        jmp show_next_pixel_tree ;jump to show_next_pixel

    next_row_tree:
        inc [y2] ;y++
        inc [y2]
        mov CX, [pre_x2]
        mov [x2], CX
        inc si  ;si++
        jmp show_next_pixel_tree ;jump to show_next_pixel

    stop_show_pixel_tree:
        mov CX, [pre_x2]
        mov [x2], CX

        mov DX, [pre_y2]
        mov [y2], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_door 
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset door ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x4]
    mov [pre_x4], CX
    mov DX, [y4]
    mov [pre_y4], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,7  ;choose silver as color (06h)
    MOV BH,00  ;set the page number
    jmp show_next_pixel_door

    show_next_pixel_door:
        MOV CX,[x4] ;set the line (x)
        MOV DX, [y4] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_door ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_door ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_door ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_door ;jump to paint_pixel

    skip_pixel_door:
        inc [x4] ;x++
        inc [x4]
        inc si  ;si++
        jmp show_next_pixel_door ;jump to show_next_pixel

    paint_pixel_door:
        int 16  ;execute the configuration (10h)
        inc [y4]
        int 16
        dec [y4]
        inc si  ;si++
        inc [x4] ;x++
        int 16
        inc [y4]
        int 16
        dec [y4]
        inc [x4]
        jmp show_next_pixel_door ;jump to show_next_pixel

    next_row_door:
        inc [y4] ;y++
        inc [y4]
        mov CX, [pre_x4]
        mov [x4], CX
        inc si  ;si++
        jmp show_next_pixel_door ;jump to show_next_pixel

    stop_show_pixel_door:
        mov CX, [pre_x4]
        mov [x4], CX

        mov DX, [pre_y4]
        mov [y4], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC open_door 
    push AX
    push BX
    push CX
    push DX
    push si
    
    call clear_screen
    call show_tree
    call show_clouds

	mov si, offset door_open ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x4]
    mov [pre_x4], CX
    mov DX, [y4]
    mov [pre_y4], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,7  ;choose silver as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_door_open

    show_next_pixel_door_open:
        MOV CX,[x4] ;set the line (x)
        MOV DX, [y4] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_door_open ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_door_open ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_door_open ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_door_open ;jump to paint_pixel

    skip_pixel_door_open:
        inc [x4] ;x++
        inc [x4]
        inc si  ;si++
        jmp show_next_pixel_door_open ;jump to show_next_pixel

    paint_pixel_door_open:
        int 16  ;execute the configuration (10h)
        inc [y4]
        int 16
        dec [y4]
        inc si  ;si++
        inc [x4] ;x++
        int 16
        inc [y4]
        int 16
        dec [y4]
        inc [x4]
        jmp show_next_pixel_door_open ;jump to show_next_pixel

    next_row_door_open:
        inc [y4] ;y++
        inc [y4]
        mov CX, [pre_x4]
        mov [x4], CX
        inc si  ;si++
        jmp show_next_pixel_door_open ;jump to show_next_pixel

    stop_show_pixel_door_open:
        mov CX, [pre_x4]
        mov [x4], CX

        mov DX, [pre_y4]
        mov [y4], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_clouds
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset clouds ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x5]
    mov [pre_x5], CX
    mov DX, [y5]
    mov [pre_y5], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,15  ;choose white as color 
    MOV BH,00  ;set the page number
    jmp show_next_pixel_clouds

    show_next_pixel_clouds:
        MOV CX,[x5] ;set the line (x)
        MOV DX, [y5] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_clouds ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_clouds ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_clouds ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_clouds ;jump to paint_pixel

    skip_pixel_clouds:
        inc [x5] ;x++
        inc [x5]
        inc si  ;si++
        jmp show_next_pixel_clouds ;jump to show_next_pixel

    paint_pixel_clouds:
        int 16  ;execute the configuration (10h)
        inc [y5]
        int 16
        dec [y5]
        inc si  ;si++
        inc [x5] ;x++
        int 16
        inc [y5]
        int 16
        dec [y5]
        inc [x5]
        jmp show_next_pixel_clouds ;jump to show_next_pixel

    next_row_clouds:
        inc [y5] ;y++
        inc [y5]
        mov CX, [pre_x5]
        mov [x5], CX
        inc si  ;si++
        jmp show_next_pixel_clouds ;jump to show_next_pixel

    stop_show_pixel_clouds:
        mov CX, [pre_x5]
        mov [x5], CX

        inc [x5]

        mov DX, [pre_y5]
        mov [y5], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_key
    push AX
    push BX
    push CX
    push DX
    push si



	mov si, offset key ;set si to be first place in memory of tree
    push CX
    push DX
    mov CX, [x3]
    mov [pre_x3], CX
    mov DX, [y3]
    mov [pre_y3], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,14  ;choose yellow as color 
    MOV BH,00  ;set the page number
    jmp show_next_pixel_key

    show_next_pixel_key:
        MOV CX,[x3] ;set the line (x)
        MOV DX, [y3] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_key ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_key ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_key ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_key ;jump to paint_pixel

    skip_pixel_key:
        inc [x3] ;x++
        inc [x3]
        inc si  ;si++
        jmp show_next_pixel_key ;jump to show_next_pixel

    paint_pixel_key:
        int 16  ;execute the configuration (10h)
        inc [y3]
        int 16
        dec [y3]
        inc si  ;si++
        inc [x3] ;x++
        int 16
        inc [y3]
        int 16
        dec [y3]
        inc [x3]
        jmp show_next_pixel_key ;jump to show_next_pixel

    next_row_key:
        inc [y3] ;y++
        inc [y3]
        mov CX, [pre_x3]
        mov [x3], CX
        inc si  ;si++
        jmp show_next_pixel_key ;jump to show_next_pixel

    stop_show_pixel_key:
        mov CX, [pre_x3]
        mov [x3], CX

        mov DX, [pre_y3]
        mov [y3], DX

        pop si
        pop DX
        pop BX
        pop AX
        pop CX

    cmp [key_fell], 40
    jge next_level

    inc [y3]
    inc [key_fell]
    jmp key_stay

    next_level:
    cmp [x], 64
    jne key_stay

    door_opened:
    call open_door
    call show_pixel
    call get_move

    check_door:
    cmp [x], 240
    jne door_opened
    sub [x], 220
    inc [level_num]
    call main_loop2

    key_stay:
    RET

endp

PROC explain_wasd
    ;write text "Move With WASD"
    mov al, 1
    mov bh, 0
    mov bl, 3    			   ;color
    mov cx, 14                 ;message size
    mov dl, 10                 ;column
    mov dh, 10                 ;row
    push cs
    pop es
    mov bp, offset wasd_explain
    mov ah, 13h
    int 10h
    jmp wasd_explain_End
    wasd_explain db "Move With WASD"

    wasd_explain_End:
    ret
ENDP

proc main_loop

    main_loop_label:

        call explain_wasd

        call show_door
        call show_clouds
        call show_pixel
        call show_tree
    
        cmp [x], 56
        jne continue_main

        cmp [last_left], 1
        jne continue_main

        inc [count_1]

        continue_main:
        cmp [count_1], 3
        jl continue_2

        call show_key

        continue_2:
        call get_move
        call clear_screen

        jmp main_loop_label
    ret

; ----------------------------------------------------------------------------------------------------------------------------------------
PROC show_nails
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset nails ;set si to be first place in memory of nails

    push CX
    push DX
    mov CX, [x9]
    mov [pre_x9], CX
    mov DX, [y9]
    mov [pre_y9], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,7  ;choose silver as color 
    MOV BH,00  ;set the page number
    jmp show_next_pixel_nails

    show_next_pixel_nails:
        MOV CX,[x9] ;set the line (x)
        MOV DX, [y9] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_nails ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_nails ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_nails ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_nails ;jump to paint_pixel

    skip_pixel_nails:
        inc [x9] ;x++
        inc [x9]
        inc si  ;si++
        jmp show_next_pixel_nails ;jump to show_next_pixel

    paint_pixel_nails:
        int 16  ;execute the configuration (10h)
        inc [y9]
        int 16
        dec [y9]
        inc si  ;si++
        inc [x9] ;x++
        int 16
        inc [y9]
        int 16
        dec [y9]
        inc [x9]
        jmp show_next_pixel_nails ;jump to show_next_pixel

    next_row_nails:
        inc [y9] ;y++
        inc [y9]
        mov CX, [pre_x9]
        mov [x9], CX
        inc si  ;si++
        jmp show_next_pixel_nails ;jump to show_next_pixel

    stop_show_pixel_nails:
        mov CX, [pre_x9]
        mov [x9], CX

        mov DX, [pre_y9]
        mov [y9], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_gift_1 
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset gift_1 ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x6]
    mov [pre_x6], CX
    mov DX, [y6]
    mov [pre_y6], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,2  ;choose green as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_gift_1

    show_next_pixel_gift_1:
        MOV CX,[x6] ;set the line (x)
        MOV DX, [y6] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_gift_1 ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_gift_1 ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 2
        je next_row_gift_1 ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_gift_1 ;jump to paint_pixel

        cmp bl, 4 ;if b1 == 4
        je paint_pixel2_gift_1


    skip_pixel_gift_1:
        inc [x6] ;x++
        inc [x6]
        inc si  ;si++
        jmp show_next_pixel_gift_1 ;jump to show_next_pixel

    paint_pixel_gift_1:
        int 16  ;execute the configuration (10h)
        inc [y6]
        int 16
        dec [y6]
        inc si  ;si++
        inc [x6] ;x++
        int 16
        inc [y6]
        int 16
        dec [y6]
        inc [x6]
        jmp show_next_pixel_gift_1
    
    paint_pixel2_gift_1:
        mov al, 4
        int 16  ;execute the configuration (10h)
        inc [y6]
        int 16
        dec [y6]
        inc si  ;si++
        inc [x6] ;x++
        int 16
        inc [y6]
        int 16
        dec [y6]
        inc [x6]
        mov al, 2
        jmp show_next_pixel_gift_1
    
    next_row_gift_1:
        inc [y6] ;y++
        inc [y6]
        mov CX, [pre_x6]
        mov [x6], CX
        inc si  ;si++
        jmp show_next_pixel_gift_1 ;jump to show_next_pixel

    stop_show_pixel_gift_1:
        mov CX, [pre_x6]
        mov [x6], CX

        mov DX, [pre_y6]
        mov [y6], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_gift_2
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset gift_1 ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x7]
    mov [pre_x7], CX
    mov DX, [y7]
    mov [pre_y7], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,9  ;choose light blue as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_gift_2

    show_next_pixel_gift_2:
        MOV CX,[x7] ;set the line (x)
        MOV DX, [y7] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_gift_2 ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_gift_2 ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 2
        je next_row_gift_2 ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_gift_2 ;jump to paint_pixel

        cmp bl, 4 ;if b1 == 4
        je paint_pixel2_gift_2


    skip_pixel_gift_2:
        inc [x7] ;x++
        inc [x7]
        inc si  ;si++
        jmp show_next_pixel_gift_2 ;jump to show_next_pixel

    paint_pixel_gift_2:
        int 16  ;execute the configuration (10h)
        inc [y7]
        int 16
        dec [y7]
        inc si  ;si++
        inc [x7] ;x++
        int 16
        inc [y7]
        int 16
        dec [y7]
        inc [x7]
        jmp show_next_pixel_gift_2
    
    paint_pixel2_gift_2:
        mov al, 12
        int 16  ;execute the configuration (10h)
        inc [y7]
        int 16
        dec [y7]
        inc si  ;si++
        inc [x7] ;x++
        int 16
        inc [y7]
        int 16
        dec [y7]
        inc [x7]
        mov al, 9
        jmp show_next_pixel_gift_2
    
    next_row_gift_2:
        inc [y7] ;y++
        inc [y7]
        mov CX, [pre_x7]
        mov [x7], CX
        inc si  ;si++
        jmp show_next_pixel_gift_2 ;jump to show_next_pixel

    stop_show_pixel_gift_2:
        mov CX, [pre_x7]
        mov [x7], CX

        mov DX, [pre_y7]
        mov [y7], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_gift_3 
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset gift_1 ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x8]
    mov [pre_x8], CX
    mov DX, [y8]
    mov [pre_y8], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,14  ;choose light magenta as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_gift_3

    show_next_pixel_gift_3:
        MOV CX,[x8] ;set the line (x)
        MOV DX, [y8] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_gift_3 ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_gift_3 ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 2
        je next_row_gift_3 ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_gift_3 ;jump to paint_pixel

        cmp bl, 4 ;if b1 == 4
        je paint_pixel2_gift_3


    skip_pixel_gift_3:
        inc [x8] ;x++
        inc [x8]
        inc si  ;si++
        jmp show_next_pixel_gift_3 ;jump to show_next_pixel

    paint_pixel_gift_3:
        int 16  ;execute the configuration (10h)
        inc [y8]
        int 16
        dec [y8]
        inc si  ;si++
        inc [x8] ;x++
        int 16
        inc [y8]
        int 16
        dec [y8]
        inc [x8]
        jmp show_next_pixel_gift_3
    
    paint_pixel2_gift_3:
        mov al, 13
        int 16  ;execute the configuration (10h)
        inc [y8]
        int 16
        dec [y8]
        inc si  ;si++
        inc [x8] ;x++
        int 16
        inc [y8]
        int 16
        dec [y8]
        inc [x8]
        mov al, 14
        jmp show_next_pixel_gift_3
    
    next_row_gift_3:
        inc [y8] ;y++
        inc [y8]
        mov CX, [pre_x8]
        mov [x8], CX
        inc si  ;si++
        jmp show_next_pixel_gift_3 ;jump to show_next_pixel

    stop_show_pixel_gift_3:
        mov CX, [pre_x8]
        mov [x8], CX

        mov DX, [pre_y8]
        mov [y8], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_hammer 
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset hammer ;si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x10]
    mov [pre_x10], CX
    mov DX, [y10]
    mov [pre_y10], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,8  ;choose dark silver as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_hammer

    show_next_pixel_hammer:
        MOV CX,[x10] ;set the line (x)
        MOV DX, [y10] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_hammer ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_hammer ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 2
        je next_row_hammer ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_hammer ;jump to paint_pixel


    skip_pixel_hammer:
        inc [x10] ;x++
        inc [x10]
        inc si  ;si++
        jmp show_next_pixel_hammer ;jump to show_next_pixel

    paint_pixel_hammer:
        int 16  ;execute the configuration (10h)
        inc [y10]
        int 16
        dec [y10]
        inc si  ;si++
        inc [x10] ;x++
        int 16
        inc [y10]
        int 16
        dec [y10]
        inc [x10]
        jmp show_next_pixel_hammer
    
    next_row_hammer:
        inc [y10] ;y++
        inc [y10]
        mov CX, [pre_x10]
        mov [x10], CX
        inc si  ;si++
        jmp show_next_pixel_hammer ;jump to show_next_pixel

    stop_show_pixel_hammer:
        mov CX, [pre_x10]
        mov [x8], CX

        mov DX, [pre_y10]
        mov [y10], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_stick
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset stick ;set si to be first place in memory of nails

    push CX
    push DX
    mov CX, [x11]
    mov [pre_x11], CX
    mov DX, [y11]
    mov [pre_y11], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,6  ;choose brown as color 
    MOV BH,00  ;set the page number
    jmp show_next_pixel_stick

    show_next_pixel_stick:
        MOV CX,[x11] ;set the line (x)
        MOV DX, [y11] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_stick ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_stick ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_stick ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_stick ;jump to paint_pixel

    skip_pixel_stick:
        inc [x11] ;x++
        inc [x11]
        inc si  ;si++
        jmp show_next_pixel_stick ;jump to show_next_pixel

    paint_pixel_stick:
        int 16  ;execute the configuration (10h)
        inc [y11]
        int 16
        dec [y11]
        inc si  ;si++
        inc [x11] ;x++
        int 16
        inc [y11]
        int 16
        dec [y11]
        inc [x11]
        jmp show_next_pixel_stick ;jump to show_next_pixel

    next_row_stick:
        inc [y11] ;y++
        inc [y11]
        mov CX, [pre_x11]
        mov [x11], CX
        inc si  ;si++
        jmp show_next_pixel_stick ;jump to show_next_pixel

    stop_show_stick:
        mov CX, [pre_x11]
        mov [x11], CX

        mov DX, [pre_y11]
        mov [y11], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC open_gift


    cmp [x], 68
    jl ignore_1
    cmp [x], 124
    jg ignore_1
    inc [gift1_draw]

    cmp [gift1_draw], 2
    jne stick1

    call show_ladder_bottom
    jmp ignore_3

    stick1:
    call show_stick

    ignore_1:
    cmp [x], 140
    jl ignore_2
    cmp [x], 196
    jg ignore_2
    inc [gift2_draw]

    cmp [gift2_draw], 2
    jne nails1

    call show_ladder_middle
    jmp ignore_3

    nails1:
    call show_nails

    ignore_2:
    cmp [x], 212
    jl ignore_3
    cmp [x], 268
    jg ignore_3
    inc [gift3_draw]

    cmp [gift3_draw], 2
    jne hammer1

    call show_ladder_top
    jmp ignore_3

    hammer1:
    call show_hammer

    ignore_3:
    call clear_screen
    ret
ENDP

PROC explain_e
    ;write text "'E' To Interact"
    mov al, 1
    mov bh, 0
    mov bl, 3    			   ;color
    mov cx, 15                 ;message size
    mov dl, 20                 ;column
    mov dh, 1                  ;row
    push cs
    pop es
    mov bp, offset E_explain
    mov ah, 13h
    int 10h
    jmp E_explain_End
    E_explain db "'E' To Interact"

    E_explain_End:
    ret
ENDP

PROC explain_space1
    ;write text "Space To Climb"
    mov al, 1
    mov bh, 0
    mov bl, 3    			   ;color
    mov cx, 14                 ;message size
    mov dl, 20                 ;column
    mov dh, 3                  ;row
    push cs
    pop es
    mov bp, offset space_explain1
    mov ah, 13h
    int 10h
    jmp space_explain_End1
    space_explain1 db "Space To Climb"

    space_explain_End1:
    ret
ENDP

PROC main_loop2

    main_loop2_label:
        call explain_e
        call explain_space1

        cmp [gift1_draw], 0
        jne stick_draw
        call show_gift_1
        jmp continue_main2

        stick_draw:
        cmp [gift1_draw], 1
        jne ladder1
        call show_stick
        jmp continue_main2

        ladder1:
        call show_ladder_bottom

        continue_main2:
        cmp [gift2_draw], 0
        jne nails_draw
        call show_gift_2
        jmp continue2_2

        nails_draw:
        cmp [gift2_draw], 1
        jne ladder2
        call show_nails
        jmp continue2_2

        ladder2:
        call show_ladder_middle
        
        continue2_2:
        cmp [gift3_draw], 0
        jne hammer_draw
        call show_gift_3
        jmp continue2_3

        hammer_draw:
        cmp [gift3_draw], 1
        jne ladder3
        call show_hammer
        jmp continue2_3

        ladder3:
        call show_ladder_top

        continue2_3:
        call show_gate_to_heaven
        call show_pixel
        call get_move

        jmp main_loop2_label

ENDP

PROC show_ladder_top
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset ladder_top ;set si to be first place in memory of nails

    push CX
    push DX
    mov CX, [x12]
    mov [pre_x12], CX
    mov DX, [y12]
    mov [pre_y12], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,6  ;choose brown as color 
    MOV BH,00  ;set the page number
    jmp show_next_pixel_ladder_top

    show_next_pixel_ladder_top:
        MOV CX,[x12] ;set the line (x)
        MOV DX, [y12] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_ladder_top ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_ladder_top ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_ladder_top ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_ladder_top ;jump to paint_pixel

    skip_pixel_ladder_top:
        inc [x12] ;x++
        inc [x12]
        inc si  ;si++
        jmp show_next_pixel_ladder_top ;jump to show_next_pixel

    paint_pixel_ladder_top:
        int 16  ;execute the configuration (10h)
        inc [y12]
        int 16
        dec [y12]
        inc si  ;si++
        inc [x12] ;x++
        int 16
        inc [y12]
        int 16
        dec [y12]
        inc [x12]
        jmp show_next_pixel_ladder_top ;jump to show_next_pixel

    next_row_ladder_top:
        inc [y12] ;y++
        inc [y12]
        mov CX, [pre_x12]
        mov [x12], CX
        inc si  ;si++
        jmp show_next_pixel_ladder_top ;jump to show_next_pixel

    stop_show_ladder_top:
        mov CX, [pre_x12]
        mov [x12], CX

        mov DX, [pre_y12]
        mov [y12], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_ladder_middle
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset ladder_middle ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x13]
    mov [pre_x13], CX
    mov DX, [y13]
    mov [pre_y13], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,6  ;choose brown as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_ladder_middle

    show_next_pixel_ladder_middle:
        MOV CX,[x13] ;set the line (x)
        MOV DX, [y13] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_ladder_middle ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_ladder_middle ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 2
        je next_row_ladder_middle ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_ladder_middle ;jump to paint_pixel

        cmp bl, 4 ;if b1 == 4
        je paint_pixel2_ladder_middle


    skip_pixel_ladder_middle:
        inc [x13] ;x++
        inc [x13]
        inc si  ;si++
        jmp show_next_pixel_ladder_middle ;jump to show_next_pixel

    paint_pixel_ladder_middle:
        int 16  ;execute the configuration (10h)
        inc [y13]
        int 16
        dec [y13]
        inc si  ;si++
        inc [x13] ;x++
        int 16
        inc [y13]
        int 16
        dec [y13]
        inc [x13]
        jmp show_next_pixel_ladder_middle
    
    paint_pixel2_ladder_middle:
        mov al, 12
        int 16  ;execute the configuration (10h)
        inc [y13]
        int 16
        dec [y13]
        inc si  ;si++
        inc [x13] ;x++
        int 16
        inc [y13]
        int 16
        dec [y13]
        inc [x13]
        mov al, 9
        jmp show_next_pixel_ladder_middle
    
    next_row_ladder_middle:
        inc [y13] ;y++
        inc [y13]
        mov CX, [pre_x13]
        mov [x13], CX
        inc si  ;si++
        jmp show_next_pixel_ladder_middle ;jump to show_next_pixel

    stop_show_pixel_ladder_middle:
        mov CX, [pre_x13]
        mov [x13], CX

        mov DX, [pre_y13]
        mov [y13], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_ladder_bottom

    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset ladder_bottom ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x14]
    mov [pre_x14], CX
    mov DX, [y14]
    mov [pre_y14], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,6  ;choose brown as color (06h)
    MOV BH,00  ;set the page number
    jmp show_next_pixel_ladder_bottom

    show_next_pixel_ladder_bottom:
        MOV CX,[x14] ;set the line (x)
        MOV DX, [y14] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_ladder_bottom ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_ladder_bottom ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_ladder_bottom ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_ladder_bottom ;jump to paint_pixel

    skip_pixel_ladder_bottom:
        inc [x14] ;x++
        inc [x14]
        inc si  ;si++
        jmp show_next_pixel_ladder_bottom ;jump to show_next_pixel

    paint_pixel_ladder_bottom:
        int 16  ;execute the configuration (10h)
        inc [y14]
        int 16
        dec [y14]
        inc si  ;si++
        inc [x14] ;x++
        int 16
        inc [y14]
        int 16
        dec [y14]
        inc [x14]
        jmp show_next_pixel_ladder_bottom ;jump to show_next_pixel

    next_row_ladder_bottom:
        inc [y14] ;y++
        inc [y14]
        mov CX, [pre_x14]
        mov [x14], CX
        inc si  ;si++
        jmp show_next_pixel_ladder_bottom ;jump to show_next_pixel

    stop_show_pixel_ladder_bottom:
        mov CX, [pre_x14]
        mov [x14], CX

        mov DX, [pre_y14]
        mov [y14], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_gate_to_heaven
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset gate_to_heaven ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x15]
    mov [pre_x15], CX
    mov DX, [y15]
    mov [pre_y15], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,14  ;choose yellow as color 
    MOV BH,00  ;set the page number
    jmp show_next_pixel_gate_to_heaven

    show_next_pixel_gate_to_heaven:
        MOV CX,[x15] ;set the line (x)
        MOV DX, [y15] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_gate_to_heaven ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_gate_to_heaven ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_gate_to_heaven ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_gate_to_heaven ;jump to paint_pixel

        cmp bl, 4  ;if b == 4
        je paint_pixel2_gate_to_heaven

    skip_pixel_gate_to_heaven:
        inc [x15] ;x++
        inc [x15]
        inc si  ;si++
        jmp show_next_pixel_gate_to_heaven ;jump to show_next_pixel

    paint_pixel_gate_to_heaven:
        int 16  ;execute the configuration (10h)
        inc [y15]
        int 16
        dec [y15]
        inc si  ;si++
        inc [x15] ;x++
        int 16
        inc [y15]
        int 16
        dec [y15]
        inc [x15]
        jmp show_next_pixel_gate_to_heaven ;jump to show_next_pixel
    
    paint_pixel2_gate_to_heaven:
        mov al, 15
        int 16  ;execute the configuration (10h)
        inc [y15]
        int 16
        dec [y15]
        inc si  ;si++
        inc [x15] ;x++
        int 16
        inc [y15]
        int 16
        dec [y15]
        inc [x15]
        mov al, 14
        jmp show_next_pixel_gate_to_heaven

    next_row_gate_to_heaven:
        inc [y15] ;y++
        inc [y15]
        mov CX, [pre_x15]
        mov [x15], CX
        inc si  ;si++
        jmp show_next_pixel_gate_to_heaven ;jump to show_next_pixel

    stop_show_pixel_gate_to_heaven:
        mov CX, [pre_x15]
        mov [x15], CX

        mov DX, [pre_y15]
        mov [y15], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC go_up
    ani_check:
    cmp [y], 43
    jl end_2

    sub [y], 8
    call clear_screen
    call show_ladder_bottom
    call show_ladder_middle
    call show_ladder_top
    call show_gate_to_heaven
    
    call show_pixel
    jmp ani_check

    end_2:
    call get_move
    call clear_screen
    add [y], 136
    inc [level_num]
    add [x], 20
    call main_loop3

    ret
ENDP
; ----------------------------------------------------------------------------------------------------------------------------------------
PROC show_cauldron 
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset cauldron ;set si to be first place in memory of cauldron

    push CX
    push DX
    mov CX, [x16]
    mov [pre_x16], CX
    mov DX, [y16]
    mov [pre_y16], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,7  ;choose silver as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_cauldron

    show_next_pixel_cauldron:
        MOV CX,[x16] ;set the line (x)
        MOV DX, [y16] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_cauldron ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_cauldron ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_cauldron ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_cauldron ;jump to paint_pixel

        cmp bl, 4 ;if b1 == 4
        je paint_pixel2_cauldron

    skip_pixel_cauldron:
        inc [x16] ;x++
        inc [x16]
        inc si  ;si++
        jmp show_next_pixel_cauldron ;jump to show_next_pixel

    paint_pixel_cauldron:
        int 16  ;execute the configuration (10h)
        inc [y16]
        int 16
        dec [y16]
        inc si  ;si++
        inc [x16] ;x++
        int 16
        inc [y16]
        int 16
        dec [y16]
        inc [x16]
        jmp show_next_pixel_cauldron ;jump to show_next_pixel
    
    paint_pixel2_cauldron:
        mov al, 8
        int 16  ;execute the configuration (10h)
        inc [y16]
        int 16
        dec [y16]
        inc si  ;si++
        inc [x16] ;x++
        int 16
        inc [y16]
        int 16
        dec [y16]
        inc [x16]
        mov al, 7
        jmp show_next_pixel_cauldron

    next_row_cauldron:
        inc [y16] ;y++
        inc [y16]
        mov CX, [pre_x16]
        mov [x16], CX
        inc si  ;si++
        jmp show_next_pixel_cauldron ;jump to show_next_pixel

    stop_show_pixel_cauldron:
        mov CX, [pre_x16]
        mov [x16], CX

        mov DX, [pre_y16]
        mov [y16], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_potion1
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset potion ;set si to be first place in memory of cauldron

    push CX
    push DX
    mov CX, [x17]
    mov [pre_x17], CX
    mov DX, [y17]
    mov [pre_y17], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,15  ;choose dwhite as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_potion1

    show_next_pixel_potion1:
        MOV CX,[x17] ;set the line (x)
        MOV DX, [y17] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_potion1 ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_potion1 ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_potion1 ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_potion1 ;jump to paint_pixel

        cmp bl, 4 ;if b1 == 4
        je paint_pixel2_potion1


    skip_pixel_potion1:
        inc [x17] ;x++
        inc [x17]
        inc si  ;si++
        jmp show_next_pixel_potion1 ;jump to show_next_pixel

    paint_pixel_potion1:
        int 16  ;execute the configuration (10h)
        inc [y17]
        int 16
        dec [y17]
        inc si  ;si++
        inc [x17] ;x++
        int 16
        inc [y17]
        int 16
        dec [y17]
        inc [x17]
        jmp show_next_pixel_potion1 ;jump to show_next_pixel
    
    paint_pixel2_potion1:
        mov al, 4
        int 16  ;execute the configuration (10h)
        inc [y17]
        int 16
        dec [y17]
        inc si  ;si++
        inc [x17] ;x++
        int 16
        inc [y17]
        int 16
        dec [y17]
        inc [x17]
        mov al, 15
        jmp show_next_pixel_potion1

    next_row_potion1:
        inc [y17] ;y++
        inc [y17]
        mov CX, [pre_x17]
        mov [x17], CX
        inc si  ;si++
        jmp show_next_pixel_potion1 ;jump to show_next_pixel

    stop_show_pixel_potion1:
        mov CX, [pre_x17]
        mov [x17], CX

        mov DX, [pre_y17]
        mov [y17], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_potion2
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset potion ;set si to be first place in memory of cauldron

    push CX
    push DX
    mov CX, [x18]
    mov [pre_x18], CX
    mov DX, [y18]
    mov [pre_y18], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,15  ;choose dwhite as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_potion2

    show_next_pixel_potion2:
        MOV CX,[x18] ;set the line (x)
        MOV DX, [y18] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_potion2 ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_potion2 ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_potion2 ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_potion2 ;jump to paint_pixel

        cmp bl, 4 ;if b1 == 4
        je paint_pixel2_potion2


    skip_pixel_potion2:
        inc [x18] ;x++
        inc [x18]
        inc si  ;si++
        jmp show_next_pixel_potion2 ;jump to show_next_pixel

    paint_pixel_potion2:
        int 16  ;execute the configuration (10h)
        inc [y18]
        int 16
        dec [y18]
        inc si  ;si++
        inc [x18] ;x++
        int 16
        inc [y18]
        int 16
        dec [y18]
        inc [x18]
        jmp show_next_pixel_potion2 ;jump to show_next_pixel
    
    paint_pixel2_potion2:
        mov al, 14
        int 16  ;execute the configuration (10h)
        inc [y18]
        int 16
        dec [y18]
        inc si  ;si++
        inc [x18] ;x++
        int 16
        inc [y18]
        int 16
        dec [y18]
        inc [x18]
        mov al, 15
        jmp show_next_pixel_potion2

    next_row_potion2:
        inc [y18] ;y++
        inc [y18]
        mov CX, [pre_x18]
        mov [x18], CX
        inc si  ;si++
        jmp show_next_pixel_potion2 ;jump to show_next_pixel

    stop_show_pixel_potion2:
        mov CX, [pre_x18]
        mov [x18], CX

        mov DX, [pre_y18]
        mov [y18], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_potion3
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset potion ;set si to be first place in memory of cauldron

    push CX
    push DX
    mov CX, [x19]
    mov [pre_x19], CX
    mov DX, [y19]
    mov [pre_y19], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,15  ;choose white as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_potion3

    show_next_pixel_potion3:
        MOV CX,[x19] ;set the line (x)
        MOV DX, [y19] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_potion3 ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_potion3 ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_potion3 ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_potion3 ;jump to paint_pixel

        cmp bl, 4 ;if b1 == 4
        je paint_pixel2_potion3


    skip_pixel_potion3:
        inc [x19] ;x++
        inc [x19]
        inc si  ;si++
        jmp show_next_pixel_potion3 ;jump to show_next_pixel

    paint_pixel_potion3:
        int 16  ;execute the configuration (10h)
        inc [y19]
        int 16
        dec [y19]
        inc si  ;si++
        inc [x19] ;x++
        int 16
        inc [y19]
        int 16
        dec [y19]
        inc [x19]
        jmp show_next_pixel_potion3 ;jump to show_next_pixel
    
    paint_pixel2_potion3:
        mov al, 9
        int 16  ;execute the configuration (10h)
        inc [y19]
        int 16
        dec [y19]
        inc si  ;si++
        inc [x19] ;x++
        int 16
        inc [y19]
        int 16
        dec [y19]
        inc [x19]
        mov al, 15
        jmp show_next_pixel_potion3

    next_row_potion3:
        inc [y19] ;y++
        inc [y19]
        mov CX, [pre_x19]
        mov [x19], CX
        inc si  ;si++
        jmp show_next_pixel_potion3 ;jump to show_next_pixel

    stop_show_pixel_potion3:
        mov CX, [pre_x19]
        mov [x19], CX

        mov DX, [pre_y19]
        mov [y19], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC make_potion

    cmp [x], 192
    jne not_red

    inc [red]

    not_red:
    cmp [x], 232
    jne not_yellow

    inc [yellow]

    not_yellow:
    cmp [x], 272
    jne not_blue

    inc [blue]

    not_blue:

    cmp [x], 136
    jl stop_potion
    cmp [x], 144
    jg stop_potion

    cmp [red], 0
    je stop_potion
    cmp [blue], 0
    je stop_potion
    cmp [yellow], 0
    jne stop_potion

    inc [potion_yum]
    call show_witchy_door

    stop_potion:
    ret

ENDP

PROC check_color
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset cauldron_primary ;set si to be first place in memory of cauldron

    push CX
    push DX
    mov CX, [x16]
    mov [pre_x16], CX
    mov DX, [y16]
    mov [pre_y16], DX
    pop DX
    pop CX

    cmp [yellow], 0
    jne cont_color

    cmp [red], 0
    jne cont_color

    cmp [blue], 0
    jne cont_color

    jmp no_color

    cont_color:

    MOV AH,12  ;set the configuration to writing a pixel (0ch)

    MOV AL,7  ;choose silver as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_cauldron_done

    show_next_pixel_cauldron_done:
        MOV CX,[x16] ;set the line (x)
        MOV DX, [y16] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_cauldron_done ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_cauldron_done ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_cauldron_done ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_cauldron_done ;jump to paint_pixel

        cmp bl, 4 ;if b1 == 4
        je paint_pixel2_cauldron_done

        cmp bl, 5 ;if bl == 5
        je paint_pixel3_cauldron_done

    skip_pixel_cauldron_done:
        add [x16], 2
        inc si  ;si++
        jmp show_next_pixel_cauldron_done ;jump to show_next_pixel
    
    no_color:
        call show_cauldron
        jmp stop_show_pixel_cauldron_done

    paint_pixel_cauldron_done:
        int 16  ;execute the configuration (10h)
        inc [y16]
        int 16
        dec [y16]
        inc si  ;si++
        inc [x16] ;x++
        int 16
        inc [y16]
        int 16
        dec [y16]
        inc [x16]
        jmp show_next_pixel_cauldron_done ;jump to show_next_pixel
    
    paint_pixel2_cauldron_done:
        mov al, 8
        int 16  ;execute the configuration (10h)
        inc [y16]
        int 16
        dec [y16]
        inc si  ;si++
        inc [x16] ;x++
        int 16
        inc [y16]
        int 16
        dec [y16]
        inc [x16]
        mov al, 7
        jmp show_next_pixel_cauldron_done
    
    next_row_cauldron_done:
        add [y16], 2 ;y += 2
        mov CX, [pre_x16]
        mov [x16], CX
        inc si  ;si++
        jmp show_next_pixel_cauldron_done ;jump to show_next_pixel

    stop_show_pixel_cauldron_done:
        mov CX, [pre_x16]
        mov [x16], CX

        mov DX, [pre_y16]
        mov [y16], DX
       jmp end_color

    paint_pixel3_cauldron_done:
        cmp [red], 0
        je blue_in
        red_in:
            cmp [blue], 0
            je not_purple

                cmp [yellow], 0
                je not_brown

                    MOV AL, 6
                    jmp end_check

                not_brown:
                MOV AL, 5
                jmp end_check

            not_purple:
            cmp [yellow], 0
            je not_orange

                MOV AL, 12
                jmp end_check
            
            not_orange:
            MOV AL, 4
            jmp end_check
        
        blue_in:
        cmp [blue], 0
        je yellow_in
            cmp [yellow], 0
            je not_green

                MOV AL, 10
                jmp end_check

            not_green:
            MOV AL, 9
            jmp end_check

        yellow_in:
        cmp [yellow], 0
        MOV AL, 14
        jmp end_check

        end_check:
        int 16  ;execute the configuration (10h)
        inc [y16]
        int 16
        dec [y16]
        inc si  ;si++
        inc [x16] ;x++
        int 16
        inc [y16]
        int 16
        dec [y16]
        inc [x16]
        mov al, 7
        jmp show_next_pixel_cauldron_done
    end_color:
    pop si
    pop DX
    pop CX
    pop BX
    pop AX
    RET


ENDP

PROC show_cauldron_magic
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset cauldron_secondary ;set si to be first place in memory of cauldron

    push CX
    push DX
    mov CX, [x21]
    mov [pre_x21], CX
    mov DX, [y21]
    mov [pre_y21], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,7  ;choose silver as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_cauldron_magic

    show_next_pixel_cauldron_magic:
        MOV CX,[x21] ;set the line (x)
        MOV DX, [y21] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_cauldron_magic ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_cauldron_magic ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_cauldron_magic ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_cauldron_magic ;jump to paint_pixel

        cmp bl, 4 ;if b1 == 4
        je paint_pixel2_cauldron_magic

        cmp bl, 5 ;if bl == 5
        je paint_pixel3_cauldron_magic

        cmp bl, 6 ;if bl == 6
        je too_far_magic

    skip_pixel_cauldron_magic:
        add [x21], 2
        inc si  ;si++
        jmp show_next_pixel_cauldron_magic ;jump to show_next_pixel

    paint_pixel_cauldron_magic:
        int 16  ;execute the configuration (10h)
        inc [y21]
        int 16
        dec [y21]
        inc si  ;si++
        inc [x21] ;x++
        int 16
        inc [y21]
        int 16
        dec [y21]
        inc [x21]
        jmp show_next_pixel_cauldron_magic ;jump to show_next_pixel
    
    paint_pixel2_cauldron_magic:
        mov al, 8
        int 16  ;execute the configuration (10h)
        inc [y21]
        int 16
        dec [y21]
        inc si  ;si++
        inc [x21] ;x++
        int 16
        inc [y21]
        int 16
        dec [y21]
        inc [x21]
        mov al, 7
        jmp show_next_pixel_cauldron_magic
    
    next_row_cauldron_magic:
        add [y21], 2 ;y += 2
        mov CX, [pre_x21]
        mov [x21], CX
        inc si  ;si++
        jmp show_next_pixel_cauldron_magic ;jump to show_next_pixel
    
    too_far_magic:
    jmp paint_pixel4_cauldron_magic

    stop_show_pixel_cauldron_magic:
        mov CX, [pre_x21]
        mov [x21], CX

        mov DX, [pre_y21]
        mov [y21], DX
        jmp stop

    paint_pixel3_cauldron_magic:
        mov al, 5
        int 16  ;execute the configuration (10h)
        inc [y21]
        int 16
        dec [y21]
        inc si  ;si++
        inc [x21] ;x++
        int 16
        inc [y21]
        int 16
        dec [y21]
        inc [x21]
        mov al, 7
        jmp show_next_pixel_cauldron_magic
    
    paint_pixel4_cauldron_magic:
        mov al, 13
        int 16  ;execute the configuration (10h)
        inc [y21]
        int 16
        dec [y21]
        inc si  ;si++
        inc [x21] ;x++
        int 16
        inc [y21]
        int 16
        dec [y21]
        inc [x21]
        mov al, 7
        jmp show_next_pixel_cauldron_magic

    stop:
    pop si
    pop DX
    pop CX
    pop BX
    pop AX
    RET


ENDP

PROC show_witchy_door
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset witchy_door ;set si to be first place in memory of cauldron

    push CX
    push DX
    mov CX, [x20]
    mov [pre_x20], CX
    mov DX, [y20]
    mov [pre_y20], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,7  ;choose silver as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_witchy_door

    show_next_pixel_witchy_door:
        MOV CX,[x20] ;set the line (x)
        MOV DX, [y20] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_witchy_door ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_witchy_door ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_witchy_door ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_witchy_door ;jump to paint_pixel

        cmp bl, 4 ;if b1 == 4
        je paint_pixel2_witchy_door

        cmp bl, 5 ;if bl == 5
        je paint_pixel3_witchy_door

        cmp bl, 6 ;if bl == 6
        je too_far_witch

    skip_pixel_witchy_door:
        add [x20], 2
        inc si  ;si++
        jmp show_next_pixel_witchy_door ;jump to show_next_pixel

    paint_pixel_witchy_door:
        int 16  ;execute the configuration (10h)
        inc [y20]
        int 16
        dec [y20]
        inc si  ;si++
        inc [x20] ;x++
        int 16
        inc [y20]
        int 16
        dec [y20]
        inc [x20]
        jmp show_next_pixel_witchy_door ;jump to show_next_pixel
    
    paint_pixel2_witchy_door:
        mov al, 8
        int 16  ;execute the configuration (10h)
        inc [y20]
        int 16
        dec [y20]
        inc si  ;si++
        inc [x20] ;x++
        int 16
        inc [y20]
        int 16
        dec [y20]
        inc [x20]
        mov al, 7
        jmp show_next_pixel_witchy_door
    
    next_row_witchy_door:
        add [y20], 2 ;y += 2
        mov CX, [pre_x20]
        mov [x20], CX
        inc si  ;si++
        jmp show_next_pixel_witchy_door ;jump to show_next_pixel
    
    too_far_witch:
    jmp paint_pixel4_witchy_door

    stop_show_pixel_witchy_door:
        mov CX, [pre_x20]
        mov [x20], CX

        mov DX, [pre_y20]
        mov [y20], DX
        jmp stop_witch

    paint_pixel3_witchy_door:
        mov al, 5
        int 16  ;execute the configuration (10h)
        inc [y20]
        int 16
        dec [y20]
        inc si  ;si++
        inc [x20] ;x++
        int 16
        inc [y20]
        int 16
        dec [y20]
        inc [x20]
        mov al, 7
        jmp show_next_pixel_witchy_door
    
    paint_pixel4_witchy_door:
        mov al, 13
        int 16  ;execute the configuration (10h)
        inc [y20]
        int 16
        dec [y20]
        inc si  ;si++
        inc [x20] ;x++
        int 16
        inc [y20]
        int 16
        dec [y20]
        inc [x20]
        mov al, 7
        jmp show_next_pixel_witchy_door

    stop_witch:
    pop si
    pop DX
    pop CX
    pop BX
    pop AX
    RET


ENDP

PROC explain_F
    ;write text "'F' To Empty"
    mov al, 1
    mov bh, 0
    mov bl, 3    			   ;color
    mov cx, 12                 ;message size
    mov dl, 20                 ;column
    mov dh, 3                  ;row
    push cs
    pop es
    mov bp, offset F_explain
    mov ah, 13h
    int 10h
    jmp F_explain_End
    F_explain db "'F' To Empty"

    F_explain_End:
    ret
ENDP

PROC explain_purple
    ;write text "Drink Me!"
    mov al, 1
    mov bh, 0
    mov bl, 5    			   ;color
    mov cx, 8                  ;message size
    mov dl, 20                 ;column
    mov dh, 5                  ;row
    push cs
    pop es
    mov bp, offset purple_explain
    mov ah, 13h
    int 10h
    jmp purple_explain_End
    purple_explain db "Drink Me!"

    purple_explain_End:
    ret
ENDP

PROC main_loop3

    main_loop3_label:

        call explain_e
        call explain_F
        call explain_purple

        cmp [red], 0
        je not_purp
        cmp [blue], 0
        je not_purp
        cmp [yellow], 0
        jne not_purp

        call show_cauldron_magic
        jmp continue_main3

        not_purp:
        call check_color

        continue_main3:
        cmp [potion_yum], 0
        je continue2_main3
        call show_witchy_door

        cmp [x], 40
        jne continue2_main3
        inc [level_num]
        call clear_screen
        add [x], 240
        jmp main_loop4_label

        continue2_main3:
        call show_potion1
        call show_potion2
        call show_potion3
        call show_pixel
        call get_move
        jmp main_loop3_label

    ret

ENDP
; ----------------------------------------------------------------------------------------------------------------------------------------
PROC main_loop4
    main_loop4_label:
        floorr:
            call show_floor
            add [y22], 60
            call show_floor
            sub [y22], 60
        tp_1_2:
            call show_tp_1
            sub [x24], 130
            sub [y24], 70
            call show_tp_1
            add [x24], 130
            add [y24], 70
        tp_3_4:
            call show_tp_3
            add [x26], 230
            sub [y26], 60
            call show_tp_3
            sub [x26], 230
            add [y26], 60
        tp_5_6:
            call show_tp_5
            sub [x28], 130
            call show_tp_5
            add [x28], 130
        tp_7_8:
            call show_tp_7
            add [x32], 180
            add [y32], 60
            call show_tp_7
            sub [x32], 180
            sub [y32], 60
        tp_9_10:
            call show_tp_9
            sub [x33], 230
            add [y33], 70
            call show_tp_9
            add [x33], 230
            sub [y33], 70
        walll:
            call show_wall
            sub [y31], 70
            call show_wall
            sub [y31], 60
            call show_wall
            add [y31], 130
        call show_tp_door
        call explain_space2

        cmp [x], 100
        jne not_finished_yet
        cmp [y], 171
        jne not_finished_yet
        call clear_screen
        sub [x24], 187
        sub [x], 2
        inc [level_num]
        call main_loop5

        not_finished_yet:
        call show_pixel
        call get_move
        jmp main_loop4_label
ENDP

PROC check_tp
    cmp [x], 224
    jne not_tp1
    cmp [y], 171
    jne not_tp1

    sub [x], 132
    sub [y], 71
    jmp not_tp10

    not_tp1:
    cmp [x], 92
    jne not_tp2
    cmp [y], 100
    jne not_tp2

    add [x], 132
    add [y], 71
    jmp not_tp10

    not_tp2:
    cmp [x], 44
    jne not_tp3
    cmp [y], 100
    jne not_tp3

    add [x], 230
    sub [y], 60
    jmp not_tp10

    not_tp3:
    cmp [x], 274
    jne not_tp4
    cmp [y], 40
    jne not_tp4

    sub [x], 230
    add [y], 60
    jmp not_tp10

    not_tp4:
    cmp [x], 226
    jne not_tp5
    cmp [y], 40
    jne not_tp5

    sub [x], 132
    jmp not_tp10

    not_tp5:
    cmp [x], 94
    jne not_tp6
    cmp [y], 40
    jne not_tp6

    add [x], 132
    jmp not_tp10

    not_tp6:
    cmp [x], 46
    jne not_tp7
    cmp [y], 40
    jne not_tp7

    add [x], 180
    add [y], 60
    jmp not_tp10

    not_tp7:
    cmp [x], 226
    jne not_tp8
    cmp [y], 100
    jne not_tp8

    sub [x], 180
    sub [y], 60
    jmp not_tp10

    not_tp8:
    cmp [x], 274
    jne not_tp9
    cmp [y], 100
    jne not_tp9

    sub [x], 230
    add [y], 71
    jmp not_tp10

    not_tp9:
    cmp [x], 44
    jne not_tp10
    cmp [y], 171
    jne not_tp10

    add [x], 230
    sub [y], 71
    jmp not_tp10

    not_tp10:
    call clear_screen
    ret
ENDP

PROC show_floor
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset floor ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x22]
    mov [pre_x22], CX
    mov DX, [y22]
    mov [pre_y22], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,7  ;choose silver as color 
    MOV BH,00  ;set the page number
    jmp show_next_pixel_floor

    show_next_pixel_floor:
        MOV CX,[x22] ;set the line (x)
        MOV DX, [y22] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_floor ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_floor ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_floor ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_floor ;jump to paint_pixel

    skip_pixel_floor:
        inc [x22] ;x++
        inc [x22]
        inc si  ;si++
        jmp show_next_pixel_floor ;jump to show_next_pixel

    paint_pixel_floor:
        int 16  ;execute the configuration (10h)
        inc [y22]
        int 16
        dec [y22]
        inc si  ;si++
        inc [x22] ;x++
        int 16
        inc [y22]
        int 16
        dec [y22]
        inc [x22]
        jmp show_next_pixel_floor ;jump to show_next_pixel

    next_row_floor:
        inc [y22] ;y++
        inc [y22]
        mov CX, [pre_x22]
        mov [x22], CX
        inc si  ;si++
        jmp show_next_pixel_floor ;jump to show_next_pixel

    stop_show_pixel_floor:
        mov CX, [pre_x22]
        mov [x22], CX

        mov DX, [pre_y22]
        mov [y22], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_wall
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset wall ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x31]
    mov [pre_x31], CX
    mov DX, [y31]
    mov [pre_y31], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,7  ;choose silver as color 
    MOV BH,00  ;set the page number
    jmp show_next_pixel_wall

    show_next_pixel_wall:
        MOV CX,[x31] ;set the line (x)
        MOV DX, [y31] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_wall ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_wall ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_wall ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_wall ;jump to paint_pixel

    skip_pixel_wall:
        inc [x31] ;x++
        inc [x31]
        inc si  ;si++
        jmp show_next_pixel_wall ;jump to show_next_pixel

    paint_pixel_wall:
        int 16  ;execute the configuration (10h)
        inc [y31]
        int 16
        dec [y31]
        inc si  ;si++
        inc [x31] ;x++
        int 16
        inc [y31]
        int 16
        dec [y31]
        inc [x31]
        jmp show_next_pixel_wall ;jump to show_next_pixel

    next_row_wall:
        inc [y31] ;y++
        inc [y31]
        mov CX, [pre_x31]
        mov [x31], CX
        inc si  ;si++
        jmp show_next_pixel_wall ;jump to show_next_pixel

    stop_show_pixel_wall:
        mov CX, [pre_x31]
        mov [x31], CX

        mov DX, [pre_y31]
        mov [y31], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_floor2
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset floor ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x23]
    mov [pre_x23], CX
    mov DX, [y23]
    mov [pre_y23], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,7  ;choose silver as color 
    MOV BH,00  ;set the page number
    jmp show_next_pixel_floor2

    show_next_pixel_floor2:
        MOV CX,[x23] ;set the line (x)
        MOV DX, [y23] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_floor2 ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_floor2 ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_floor2 ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_floor2 ;jump to paint_pixel

    skip_pixel_floor2:
        inc [x23] ;x++
        inc [x23]
        inc si  ;si++
        jmp show_next_pixel_floor2 ;jump to show_next_pixel

    paint_pixel_floor2:
        int 16  ;execute the configuration (10h)
        inc [y23]
        int 16
        dec [y23]
        inc si  ;si++
        inc [x23] ;x++
        int 16
        inc [y23]
        int 16
        dec [y23]
        inc [x23]
        jmp show_next_pixel_floor2 ;jump to show_next_pixel

    next_row_floor2:
        inc [y23] ;y++
        inc [y23]
        mov CX, [pre_x23]
        mov [x23], CX
        inc si  ;si++
        jmp show_next_pixel_floor2 ;jump to show_next_pixel

    stop_show_pixel_floor2:
        mov CX, [pre_x23]
        mov [x23], CX

        mov DX, [pre_y23]
        mov [y23], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_tp_1
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset teleporter ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x24]
    mov [pre_x24], CX
    mov DX, [y24]
    mov [pre_y24], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,12  ;choose light red as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_tp_1

    show_next_pixel_tp_1:
        MOV CX,[x24] ;set the line (x)
        MOV DX, [y24] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_tp_1 ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_tp_1 ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 2
        je next_row_tp_1 ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_tp_1 ;jump to paint_pixel

        cmp bl, 4 ;if b1 == 4
        je paint_pixel2_tp_1


    skip_pixel_tp_1:
        inc [x24] ;x++
        inc [x24]
        inc si  ;si++
        jmp show_next_pixel_tp_1 ;jump to show_next_pixel

    paint_pixel_tp_1:
        int 16  ;execute the configuration (10h)
        inc [y24]
        int 16
        dec [y24]
        inc si  ;si++
        inc [x24] ;x++
        int 16
        inc [y24]
        int 16
        dec [y24]
        inc [x24]
        jmp show_next_pixel_tp_1
    
    paint_pixel2_tp_1:
        mov al, 4
        int 16  ;execute the configuration (10h)
        inc [y24]
        int 16
        dec [y24]
        inc si  ;si++
        inc [x24] ;x++
        int 16
        inc [y24]
        int 16
        dec [y24]
        inc [x24]
        mov al, 12
        jmp show_next_pixel_tp_1
    
    next_row_tp_1:
        inc [y24] ;y++
        inc [y24]
        mov CX, [pre_x24]
        mov [x24], CX
        inc si  ;si++
        jmp show_next_pixel_tp_1 ;jump to show_next_pixel

    stop_show_pixel_tp_1:
        mov CX, [pre_x24]
        mov [x24], CX

        mov DX, [pre_y24]
        mov [y24], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_tp_3
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset teleporter ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x26]
    mov [pre_x26], CX
    mov DX, [y26]
    mov [pre_y26], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,9   ;choose light blue as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_tp_3

    show_next_pixel_tp_3:
        MOV CX,[x26] ;set the line (x)
        MOV DX, [y26] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_tp_3 ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_tp_3 ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 2
        je next_row_tp_3 ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_tp_3 ;jump to paint_pixel

        cmp bl, 4 ;if b1 == 4
        je paint_pixel2_tp_3


    skip_pixel_tp_3:
        inc [x26] ;x++
        inc [x26]
        inc si  ;si++
        jmp show_next_pixel_tp_3 ;jump to show_next_pixel

    paint_pixel_tp_3:
        int 16  ;execute the configuration (10h)
        inc [y26]
        int 16
        dec [y26]
        inc si  ;si++
        inc [x26] ;x++
        int 16
        inc [y26]
        int 16
        dec [y26]
        inc [x26]
        jmp show_next_pixel_tp_3
    
    paint_pixel2_tp_3:
        mov al, 1
        int 16  ;execute the configuration (10h)
        inc [y26]
        int 16
        dec [y26]
        inc si  ;si++
        inc [x26] ;x++
        int 16
        inc [y26]
        int 16
        dec [y26]
        inc [x26]
        mov al, 9
        jmp show_next_pixel_tp_3
    
    next_row_tp_3:
        inc [y26] ;y++
        inc [y26]
        mov CX, [pre_x26]
        mov [x26], CX
        inc si  ;si++
        jmp show_next_pixel_tp_3 ;jump to show_next_pixel

    stop_show_pixel_tp_3:
        mov CX, [pre_x26]
        mov [x26], CX

        mov DX, [pre_y26]
        mov [y26], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_tp_5
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset teleporter ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x28]
    mov [pre_x28], CX
    mov DX, [y28]
    mov [pre_y28], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,10  ;choose light green as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_tp_5

    show_next_pixel_tp_5:
        MOV CX,[x28] ;set the line (x)
        MOV DX, [y28] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_tp_5 ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_tp_5 ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 2
        je next_row_tp_5 ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_tp_5 ;jump to paint_pixel

        cmp bl, 4 ;if b1 == 4
        je paint_pixel2_tp_5


    skip_pixel_tp_5:
        inc [x28] ;x++
        inc [x28]
        inc si  ;si++
        jmp show_next_pixel_tp_5 ;jump to show_next_pixel

    paint_pixel_tp_5:
        int 16  ;execute the configuration (10h)
        inc [y28]
        int 16
        dec [y28]
        inc si  ;si++
        inc [x28] ;x++
        int 16
        inc [y28]
        int 16
        dec [y28]
        inc [x28]
        jmp show_next_pixel_tp_5
    
    paint_pixel2_tp_5:
        mov al, 2
        int 16  ;execute the configuration (10h)
        inc [y28]
        int 16
        dec [y28]
        inc si  ;si++
        inc [x28] ;x++
        int 16
        inc [y28]
        int 16
        dec [y28]
        inc [x28]
        mov al, 10
        jmp show_next_pixel_tp_5
    
    next_row_tp_5:
        inc [y28] ;y++
        inc [y28]
        mov CX, [pre_x28]
        mov [x28], CX
        inc si  ;si++
        jmp show_next_pixel_tp_5 ;jump to show_next_pixel

    stop_show_pixel_tp_5:
        mov CX, [pre_x28]
        mov [x28], CX

        mov DX, [pre_y28]
        mov [y28], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP
    
PROC show_tp_7
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset teleporter ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x32]
    mov [pre_x32], CX
    mov DX, [y32]
    mov [pre_y32], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,13   ;choose pink as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_tp_7

    show_next_pixel_tp_7:
        MOV CX,[x32] ;set the line (x)
        MOV DX, [y32] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_tp_7 ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_tp_7 ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 2
        je next_row_tp_7 ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_tp_7 ;jump to paint_pixel

        cmp bl, 4 ;if b1 == 4
        je paint_pixel2_tp_7


    skip_pixel_tp_7:
        inc [x32] ;x++
        inc [x32]
        inc si  ;si++
        jmp show_next_pixel_tp_7 ;jump to show_next_pixel

    paint_pixel_tp_7:
        int 16  ;execute the configuration (10h)
        inc [y32]
        int 16
        dec [y32]
        inc si  ;si++
        inc [x32] ;x++
        int 16
        inc [y32]
        int 16
        dec [y32]
        inc [x32]
        jmp show_next_pixel_tp_7
    
    paint_pixel2_tp_7:
        mov al, 5
        int 16  ;execute the configuration (10h)
        inc [y32]
        int 16
        dec [y32]
        inc si  ;si++
        inc [x32] ;x++
        int 16
        inc [y32]
        int 16
        dec [y32]
        inc [x32]
        mov al, 13
        jmp show_next_pixel_tp_7
    
    next_row_tp_7:
        inc [y32] ;y++
        inc [y32]
        mov CX, [pre_x32]
        mov [x32], CX
        inc si  ;si++
        jmp show_next_pixel_tp_7 ;jump to show_next_pixel

    stop_show_pixel_tp_7:
        mov CX, [pre_x32]
        mov [x32], CX

        mov DX, [pre_y32]
        mov [y32], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_tp_9
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset teleporter ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x33]
    mov [pre_x33], CX
    mov DX, [y33]
    mov [pre_y33], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,15  ;choose white as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_tp_9

    show_next_pixel_tp_9:
        MOV CX,[x33] ;set the line (x)
        MOV DX, [y33] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_tp_9 ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_tp_9 ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 2
        je next_row_tp_9 ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_tp_9 ;jump to paint_pixel

        cmp bl, 4 ;if b1 == 4
        je paint_pixel2_tp_9


    skip_pixel_tp_9:
        inc [x33] ;x++
        inc [x33]
        inc si  ;si++
        jmp show_next_pixel_tp_9 ;jump to show_next_pixel

    paint_pixel_tp_9:
        int 16  ;execute the configuration (10h)
        inc [y33]
        int 16
        dec [y33]
        inc si  ;si++
        inc [x33] ;x++
        int 16
        inc [y33]
        int 16
        dec [y33]
        inc [x33]
        jmp show_next_pixel_tp_9
    
    paint_pixel2_tp_9:
        mov al, 14
        int 16  ;execute the configuration (10h)
        inc [y33]
        int 16
        dec [y33]
        inc si  ;si++
        inc [x33] ;x++
        int 16
        inc [y33]
        int 16
        dec [y33]
        inc [x33]
        mov al, 15
        jmp show_next_pixel_tp_9
    
    next_row_tp_9:
        inc [y33] ;y++
        inc [y33]
        mov CX, [pre_x33]
        mov [x33], CX
        inc si  ;si++
        jmp show_next_pixel_tp_9 ;jump to show_next_pixel

    stop_show_pixel_tp_9:
        mov CX, [pre_x33]
        mov [x33], CX

        mov DX, [pre_y33]
        mov [y33], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC explain_space2
    ;write text "Space To Teleport"
    mov al, 1
    mov bh, 0
    mov bl, 3    			   ;color
    mov cx, 17                 ;message size
    mov dl, 20                 ;column
    mov dh, 1                  ;row
    push cs
    pop es
    mov bp, offset space_explain2
    mov ah, 13h
    int 10h
    jmp space_explain_End2
    space_explain2 db "Space To Teleport"

    space_explain_End2:
    ret
ENDP

PROC show_tp_door
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset teleport_door ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x30]
    mov [pre_x30], CX
    mov DX, [y30]
    mov [pre_y30], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,8   ;choose dark silver as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_tp_door

    show_next_pixel_tp_door:
        MOV CX,[x30] ;set the line (x)
        MOV DX, [y30] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_tp_door ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_tp_door ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 2
        je next_row_tp_door ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_tp_door ;jump to paint_pixel

        cmp bl, 4 ;if b1 == 4
        je paint_pixel2_tp_door

        cmp bl, 5 ;if bl == 5
        je paint_pixel3_tp_door


    skip_pixel_tp_door:
        inc [x30] ;x++
        inc [x30]
        inc si  ;si++
        jmp show_next_pixel_tp_door ;jump to show_next_pixel

    paint_pixel_tp_door:
        int 16  ;execute the configuration (10h)
        inc [y30]
        int 16
        dec [y30]
        inc si  ;si++
        inc [x30] ;x++
        int 16
        inc [y30]
        int 16
        dec [y30]
        inc [x30]
        jmp show_next_pixel_tp_door
    
    paint_pixel2_tp_door:
        mov al, 5
        int 16  ;execute the configuration (10h)
        inc [y30]
        int 16
        dec [y30]
        inc si  ;si++
        inc [x30] ;x++
        int 16
        inc [y30]
        int 16
        dec [y30]
        inc [x30]
        mov al, 8
        jmp show_next_pixel_tp_door
    
    next_row_tp_door:
        inc [y30] ;y++
        inc [y30]
        mov CX, [pre_x30]
        mov [x30], CX
        inc si  ;si++
        jmp show_next_pixel_tp_door ;jump to show_next_pixel

    stop_show_pixel_tp_door:
        mov CX, [pre_x30]
        mov [x30], CX

        mov DX, [pre_y30]
        mov [y30], DX

        jmp end_tp_door

    paint_pixel3_tp_door:
        mov al, 14
        int 16  ;execute the configuration (10h)
        inc [y30]
        int 16
        dec [y30]
        inc si  ;si++
        inc [x30] ;x++
        int 16
        inc [y30]
        int 16
        dec [y30]
        inc [x30]
        mov al, 8
        jmp show_next_pixel_tp_door

        end_tp_door:
        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP
; ----------------------------------------------------------------------------------------------------------------------------------------
PROC main_loop5
    main_loop5_label:
        cmp [spilled], 0
        jne spilled2
        call look_familiar
        spilled2:
        call show_bucket
        call show_tree2
        call show_tree3
        call show_clouds
        cmp [pressed], 0
        jne continue_main5
        call show_tp_1
        continue_main5:
        call show_door2
        call show_pixel

        cmp [pressed], 0
        je continue2_main5

        cmp [pressed], 20
        jge continue2_main5

        inc [pressed]
        dec [y2]

        continue2_main5:
        cmp [spilled], 0
        je continue3_main5

        cmp [x], 242
        jne continue3_main5

        call clear_screen
        call end_game

        continue3_main5:
        call get_move
        jmp main_loop5_label

ENDP

PROC clear_screen2
	push ax
	push bx
	push cx
	push dx

    mov ax,0600h
	mov bh,7
	mov cx,0h
	mov dx,184fh
	int 10h

	pop dx
	pop cx
	pop bx
	pop ax

	ret
ENDP

PROC show_door2 
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset door_open ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x4]
    mov [pre_x4], CX
    mov DX, [y4]
    mov [pre_y4], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,0  ;choose black as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_door2

    show_next_pixel_door2:
        MOV CX,[x4] ;set the line (x)
        MOV DX, [y4] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_door2 ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_door2 ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_door2 ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_door2 ;jump to paint_pixel

    skip_pixel_door2:
        inc [x4] ;x++
        inc [x4]
        inc si  ;si++
        jmp show_next_pixel_door2 ;jump to show_next_pixel

    paint_pixel_door2:
        int 16  ;execute the configuration (10h)
        inc [y4]
        int 16
        dec [y4]
        inc si  ;si++
        inc [x4] ;x++
        int 16
        inc [y4]
        int 16
        dec [y4]
        inc [x4]
        jmp show_next_pixel_door2 ;jump to show_next_pixel

    next_row_door2:
        inc [y4] ;y++
        inc [y4]
        mov CX, [pre_x4]
        mov [x4], CX
        inc si  ;si++
        jmp show_next_pixel_door2 ;jump to show_next_pixel

    stop_show_pixel_door2:
        mov CX, [pre_x4]
        mov [x4], CX

        mov DX, [pre_y4]
        mov [y4], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_bucket 
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset bucket ;set si to be first place in memory of bucket

    push CX
    push DX
    mov CX, [x23]
    mov [pre_x23], CX
    mov DX, [y23]
    mov [pre_y23], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,8  ;choose dark silver as color
    MOV BH,00  ;set the page number
    jmp show_next_pixel_bucket

    show_next_pixel_bucket:
        MOV CX,[x23] ;set the line (x)
        MOV DX, [y23] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_bucket ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_bucket ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_bucket ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_bucket ;jump to stop_show_pixel

        cmp bl, 4  ;if b1 == 3
        je paint_pixel2_bucket ;jump to paint_pixel2

    skip_pixel_bucket:
        inc [x23] ;x++
        inc [x23]
        inc si  ;si++
        jmp show_next_pixel_bucket ;jump to show_next_pixel

    paint_pixel_bucket:
        int 16  ;execute the configuration (10h)
        inc [y23]
        int 16
        dec [y23]
        inc si  ;si++
        inc [x23] ;x++
        int 16
        inc [y23]
        int 16
        dec [y23]
        inc [x23]
        jmp show_next_pixel_bucket ;jump to show_next_pixel
    
    paint_pixel2_bucket:
        mov al, 7
        int 16  ;execute the configuration (10h)
        inc [y23]
        int 16
        dec [y23]
        inc si  ;si++
        inc [x23] ;x++
        int 16
        inc [y23]
        int 16
        dec [y23]
        inc [x23]
        mov al, 8
        jmp show_next_pixel_bucket

    next_row_bucket:
        inc [y23] ;y++
        inc [y23]
        mov CX, [pre_x23]
        mov [x23], CX
        inc si  ;si++
        jmp show_next_pixel_bucket ;jump to show_next_pixel

    stop_show_pixel_bucket:
        mov CX, [pre_x23]
        mov [x23], CX

        mov DX, [pre_y23]
        mov [y23], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_tree2 
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset tree2 ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x2]
    mov [pre_x2], CX
    mov DX, [y2]
    mov [pre_y2], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,6  ;choose brown as color (06h)
    MOV BH,00  ;set the page number
    jmp show_next_pixel_tree2

    show_next_pixel_tree2:
        MOV CX,[x2] ;set the line (x)
        MOV DX, [y2] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_tree2 ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_tree2 ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_tree2 ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_tree2 ;jump to paint_pixel

    skip_pixel_tree2:
        inc [x2] ;x++
        inc [x2]
        inc si  ;si++
        jmp show_next_pixel_tree2 ;jump to show_next_pixel

    paint_pixel_tree2:
        int 16  ;execute the configuration (10h)
        inc [y2]
        int 16
        dec [y2]
        inc si  ;si++
        inc [x2] ;x++
        int 16
        inc [y2]
        int 16
        dec [y2]
        inc [x2]
        jmp show_next_pixel_tree2 ;jump to show_next_pixel

    next_row_tree2:
        inc [y2] ;y++
        inc [y2]
        mov CX, [pre_x2]
        mov [x2], CX
        inc si  ;si++
        jmp show_next_pixel_tree2 ;jump to show_next_pixel

    stop_show_pixel_tree2:
        mov CX, [pre_x2]
        mov [x2], CX

        mov DX, [pre_y2]
        mov [y2], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC show_tree3 
    push AX
    push BX
    push CX
    push DX
    push si
    
	mov si, offset tree3 ;set si to be first place in memory of tree

    push CX
    push DX
    mov CX, [x2]
    mov [pre_x2], CX
    mov DX, [yy2]
    mov [pre_yy2], DX
    pop DX
    pop CX

    MOV AH,12  ;set the configuration to writing a pixel (0ch)
    MOV AL,6  ;choose brown as color (06h)
    MOV BH,00  ;set the page number
    jmp show_next_pixel_tree3

    show_next_pixel_tree3:
        MOV CX,[x2] ;set the line (x)
        MOV DX, [yy2] ;set the line (Y)
        mov bl, [si]

        cmp bl, 0  ;if b1 == 0
        je paint_pixel_tree3 ;jump to paint_pixel

        cmp bl, 1  ;if b1 == 1
        je skip_pixel_tree3 ;jump to skip_pixel

        cmp bl, 2  ;if b1 == 0
        je next_row_tree3 ;jump to next_raw

        cmp bl, 3  ;if b1 == 3
        je stop_show_pixel_tree3 ;jump to paint_pixel

    skip_pixel_tree3:
        inc [x2] ;x++
        inc [x2]
        inc si  ;si++
        jmp show_next_pixel_tree3 ;jump to show_next_pixel

    paint_pixel_tree3:
        int 16  ;execute the configuration (10h)
        inc [yy2]
        int 16
        dec [yy2]
        inc si  ;si++
        inc [x2] ;x++
        int 16
        inc [yy2]
        int 16
        dec [yy2]
        inc [x2]
        jmp show_next_pixel_tree3 ;jump to show_next_pixel

    next_row_tree3:
        inc [yy2] ;y++
        inc [yy2]
        mov CX, [pre_x2]
        mov [x2], CX
        inc si  ;si++
        jmp show_next_pixel_tree3 ;jump to show_next_pixel

    stop_show_pixel_tree3:
        mov CX, [pre_x2]
        mov [x2], CX

        mov DX, [pre_yy2]
        mov [yy2], DX

        pop si
        pop DX
        pop CX
        pop BX
        pop AX
        RET
    
ENDP

PROC look_familiar
    ;write text "Looks Familiar?"
    mov al, 1
    mov bh, 0
    mov bl, 3    			   ;color
    mov cx, 15                 ;message size
    mov dl, 10                 ;column
    mov dh, 10                 ;row
    push cs
    pop es
    mov bp, offset looks_familiar
    mov ah, 13h
    int 10h
    jmp look_familiar_End
    looks_familiar db "Looks Familiar?"

    look_familiar_End:
    ret
ENDP
; ----------------------------------------------------------------------------------------------------------------------------------------
PROC end_game
    end_game_label:
        ;write text "The End"
        mov al, 1
        mov bh, 0
        mov bl, 3    			   ;color
        mov cx, 7                  ;message size
        mov dl, 16                 ;column
        mov dh, 10                 ;row
        push cs
        pop es
        mov bp, offset the_end
        mov ah, 13h
        int 10h
        jmp the_End_label
        the_end db "The End"

        the_End_label:
        ;write text "GG"
        mov al, 1
        mov bh, 0
        mov bl, 3    			   ;color
        mov cx, 2                  ;message size
        mov dl, 18                 ;column
        mov dh, 12                 ;row
        push cs
        pop es
        mov bp, offset gg
        mov ah, 13h
        int 10h
        jmp gg_End
        gg db "GG"

        gg_End:
        jmp end_game_label

ENDP

start:
    mov ax, @data
    mov ds, ax
; --------------------------
MOV AH,00  ;set the configuration to video mode
MOV AL,19  ;choose the video mode (13h)
INT 16     ;execute the configuration (10h)

MOV AH,0Bh ;set the configuration
MOV BH,00h ;to the background color
MOV BL,00h ;choose black as background color
INT 16     ;execute the configuration (10h)


call pre_game


; --------------------------

    mov ah, 0 
    int 16h
    mov ax, 0003h 
    int 10h
exit:
    mov ax, 4c00h
    int 21h
END start
